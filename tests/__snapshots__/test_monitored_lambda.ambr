# serializer version: 1
# name: test_monitored_lambda[False-False]
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'MonitoredLambda312B5BF4': dict({
        'DependsOn': list([
          'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'MonitoredLambdaServiceRoleB15BFAFA',
        ]),
        'Properties': dict({
          'Code': dict({
            'ImageUri': dict({
              'Fn::Sub': '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:0be629293f9873f370bb8528863b35ce326633d98dd9837929fd3e541bbd9e3f',
            }),
          }),
          'Environment': dict({
            'Variables': dict({
              'RUNNING_IN_AWS': 'true',
            }),
          }),
          'LoggingConfig': dict({
            'LogGroup': dict({
              'Ref': 'MonitoredLambdaLogGroup85A38BE4',
            }),
          }),
          'MemorySize': 256,
          'PackageType': 'Image',
          'Role': dict({
            'Fn::GetAtt': list([
              'MonitoredLambdaServiceRoleB15BFAFA',
              'Arn',
            ]),
          }),
          'Timeout': 4,
          'TracingConfig': dict({
            'Mode': 'Active',
          }),
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'MonitoredLambdaLogGroup85A38BE4': dict({
        'DeletionPolicy': 'Delete',
        'Properties': dict({
          'RetentionInDays': 14,
        }),
        'Type': 'AWS::Logs::LogGroup',
        'UpdateReplacePolicy': 'Delete',
      }),
      'MonitoredLambdaServiceRoleB15BFAFA': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'MonitoredLambdaServiceRoleDefaultPolicyE78C036D': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  'xray:PutTraceSegments',
                  'xray:PutTelemetryRecords',
                ]),
                'Effect': 'Allow',
                'Resource': '*',
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'Roles': list([
            dict({
              'Ref': 'MonitoredLambdaServiceRoleB15BFAFA',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_monitored_lambda[False-True]
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'MonitoredLambda312B5BF4': dict({
        'DependsOn': list([
          'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'MonitoredLambdaServiceRoleB15BFAFA',
        ]),
        'Properties': dict({
          'Code': dict({
            'ImageUri': dict({
              'Fn::Sub': '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:0be629293f9873f370bb8528863b35ce326633d98dd9837929fd3e541bbd9e3f',
            }),
          }),
          'Environment': dict({
            'Variables': dict({
              'RUNNING_IN_AWS': 'true',
            }),
          }),
          'LoggingConfig': dict({
            'LogGroup': dict({
              'Ref': 'MonitoredLambdaLogGroup85A38BE4',
            }),
          }),
          'MemorySize': 256,
          'PackageType': 'Image',
          'Role': dict({
            'Fn::GetAtt': list([
              'MonitoredLambdaServiceRoleB15BFAFA',
              'Arn',
            ]),
          }),
          'Timeout': 4,
          'TracingConfig': dict({
            'Mode': 'Active',
          }),
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'MonitoredLambdaErrorsB6682A08': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'Dimensions': list([
            dict({
              'Name': 'FunctionName',
              'Value': dict({
                'Ref': 'MonitoredLambda312B5BF4',
              }),
            }),
          ]),
          'EvaluationPeriods': 1,
          'MetricName': 'Errors',
          'Namespace': 'AWS/Lambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaLogGroup85A38BE4': dict({
        'DeletionPolicy': 'Delete',
        'Properties': dict({
          'RetentionInDays': 14,
        }),
        'Type': 'AWS::Logs::LogGroup',
        'UpdateReplacePolicy': 'Delete',
      }),
      'MonitoredLambdaServiceRoleB15BFAFA': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'MonitoredLambdaServiceRoleDefaultPolicyE78C036D': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  'xray:PutTraceSegments',
                  'xray:PutTelemetryRecords',
                ]),
                'Effect': 'Allow',
                'Resource': '*',
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'Roles': list([
            dict({
              'Ref': 'MonitoredLambdaServiceRoleB15BFAFA',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'MonitoredLambdaThrottles43BBB332': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'Dimensions': list([
            dict({
              'Name': 'FunctionName',
              'Value': dict({
                'Ref': 'MonitoredLambda312B5BF4',
              }),
            }),
          ]),
          'EvaluationPeriods': 1,
          'MetricName': 'Throttles',
          'Namespace': 'AWS/Lambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaTimeouts766EF377': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'EvaluationPeriods': 1,
          'MetricName': 'Timeouts',
          'Namespace': 'MonitoredLambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaTimeoutsMetricFilter5CC7530E': dict({
        'Properties': dict({
          'FilterPattern': '"Task timed out"',
          'LogGroupName': dict({
            'Ref': 'MonitoredLambdaLogGroup85A38BE4',
          }),
          'MetricTransformations': list([
            dict({
              'DefaultValue': 0,
              'MetricName': 'Timeouts',
              'MetricNamespace': 'MonitoredLambda',
              'MetricValue': '1',
              'Unit': 'Count',
            }),
          ]),
        }),
        'Type': 'AWS::Logs::MetricFilter',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_monitored_lambda[True-False]
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'MonitoredLambda312B5BF4': dict({
        'DependsOn': list([
          'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'MonitoredLambdaServiceRoleB15BFAFA',
        ]),
        'Properties': dict({
          'Code': dict({
            'ImageUri': dict({
              'Fn::Sub': '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:0be629293f9873f370bb8528863b35ce326633d98dd9837929fd3e541bbd9e3f',
            }),
          }),
          'Environment': dict({
            'Variables': dict({
              'AWS_CODEGURU_PROFILER_GROUP_ARN': dict({
                'Fn::GetAtt': list([
                  'MonitoredLambdaProfilingGroupED6E1418',
                  'Arn',
                ]),
              }),
              'RUNNING_IN_AWS': 'true',
            }),
          }),
          'LoggingConfig': dict({
            'LogGroup': dict({
              'Ref': 'MonitoredLambdaLogGroup85A38BE4',
            }),
          }),
          'MemorySize': 256,
          'PackageType': 'Image',
          'Role': dict({
            'Fn::GetAtt': list([
              'MonitoredLambdaServiceRoleB15BFAFA',
              'Arn',
            ]),
          }),
          'Timeout': 4,
          'TracingConfig': dict({
            'Mode': 'Active',
          }),
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'MonitoredLambdaLogGroup85A38BE4': dict({
        'DeletionPolicy': 'Delete',
        'Properties': dict({
          'RetentionInDays': 14,
        }),
        'Type': 'AWS::Logs::LogGroup',
        'UpdateReplacePolicy': 'Delete',
      }),
      'MonitoredLambdaProfilingGroupED6E1418': dict({
        'Properties': dict({
          'ComputePlatform': 'AWSLambda',
          'ProfilingGroupName': 'MonitoredLambdaProfilingGroup',
        }),
        'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
      }),
      'MonitoredLambdaServiceRoleB15BFAFA': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'MonitoredLambdaServiceRoleDefaultPolicyE78C036D': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  'xray:PutTraceSegments',
                  'xray:PutTelemetryRecords',
                ]),
                'Effect': 'Allow',
                'Resource': '*',
              }),
              dict({
                'Action': list([
                  'codeguru-profiler:ConfigureAgent',
                  'codeguru-profiler:PostAgentProfile',
                ]),
                'Effect': 'Allow',
                'Resource': dict({
                  'Fn::GetAtt': list([
                    'MonitoredLambdaProfilingGroupED6E1418',
                    'Arn',
                  ]),
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'Roles': list([
            dict({
              'Ref': 'MonitoredLambdaServiceRoleB15BFAFA',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
# name: test_monitored_lambda[True-True]
  dict({
    'Parameters': dict({
      'BootstrapVersion': dict({
        'Default': '/cdk-bootstrap/hnb659fds/version',
        'Description': 'Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]',
        'Type': 'AWS::SSM::Parameter::Value<String>',
      }),
    }),
    'Resources': dict({
      'MonitoredLambda312B5BF4': dict({
        'DependsOn': list([
          'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'MonitoredLambdaServiceRoleB15BFAFA',
        ]),
        'Properties': dict({
          'Code': dict({
            'ImageUri': dict({
              'Fn::Sub': '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:0be629293f9873f370bb8528863b35ce326633d98dd9837929fd3e541bbd9e3f',
            }),
          }),
          'Environment': dict({
            'Variables': dict({
              'AWS_CODEGURU_PROFILER_GROUP_ARN': dict({
                'Fn::GetAtt': list([
                  'MonitoredLambdaProfilingGroupED6E1418',
                  'Arn',
                ]),
              }),
              'RUNNING_IN_AWS': 'true',
            }),
          }),
          'LoggingConfig': dict({
            'LogGroup': dict({
              'Ref': 'MonitoredLambdaLogGroup85A38BE4',
            }),
          }),
          'MemorySize': 256,
          'PackageType': 'Image',
          'Role': dict({
            'Fn::GetAtt': list([
              'MonitoredLambdaServiceRoleB15BFAFA',
              'Arn',
            ]),
          }),
          'Timeout': 4,
          'TracingConfig': dict({
            'Mode': 'Active',
          }),
        }),
        'Type': 'AWS::Lambda::Function',
      }),
      'MonitoredLambdaErrorsB6682A08': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'Dimensions': list([
            dict({
              'Name': 'FunctionName',
              'Value': dict({
                'Ref': 'MonitoredLambda312B5BF4',
              }),
            }),
          ]),
          'EvaluationPeriods': 1,
          'MetricName': 'Errors',
          'Namespace': 'AWS/Lambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaLogGroup85A38BE4': dict({
        'DeletionPolicy': 'Delete',
        'Properties': dict({
          'RetentionInDays': 14,
        }),
        'Type': 'AWS::Logs::LogGroup',
        'UpdateReplacePolicy': 'Delete',
      }),
      'MonitoredLambdaProfilingGroupED6E1418': dict({
        'Properties': dict({
          'ComputePlatform': 'AWSLambda',
          'ProfilingGroupName': 'MonitoredLambdaProfilingGroup',
        }),
        'Type': 'AWS::CodeGuruProfiler::ProfilingGroup',
      }),
      'MonitoredLambdaServiceRoleB15BFAFA': dict({
        'Properties': dict({
          'AssumeRolePolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': 'sts:AssumeRole',
                'Effect': 'Allow',
                'Principal': dict({
                  'Service': 'lambda.amazonaws.com',
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'ManagedPolicyArns': list([
            dict({
              'Fn::Join': list([
                '',
                list([
                  'arn:',
                  dict({
                    'Ref': 'AWS::Partition',
                  }),
                  ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',
                ]),
              ]),
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Role',
      }),
      'MonitoredLambdaServiceRoleDefaultPolicyE78C036D': dict({
        'Properties': dict({
          'PolicyDocument': dict({
            'Statement': list([
              dict({
                'Action': list([
                  'xray:PutTraceSegments',
                  'xray:PutTelemetryRecords',
                ]),
                'Effect': 'Allow',
                'Resource': '*',
              }),
              dict({
                'Action': list([
                  'codeguru-profiler:ConfigureAgent',
                  'codeguru-profiler:PostAgentProfile',
                ]),
                'Effect': 'Allow',
                'Resource': dict({
                  'Fn::GetAtt': list([
                    'MonitoredLambdaProfilingGroupED6E1418',
                    'Arn',
                  ]),
                }),
              }),
            ]),
            'Version': '2012-10-17',
          }),
          'PolicyName': 'MonitoredLambdaServiceRoleDefaultPolicyE78C036D',
          'Roles': list([
            dict({
              'Ref': 'MonitoredLambdaServiceRoleB15BFAFA',
            }),
          ]),
        }),
        'Type': 'AWS::IAM::Policy',
      }),
      'MonitoredLambdaThrottles43BBB332': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'Dimensions': list([
            dict({
              'Name': 'FunctionName',
              'Value': dict({
                'Ref': 'MonitoredLambda312B5BF4',
              }),
            }),
          ]),
          'EvaluationPeriods': 1,
          'MetricName': 'Throttles',
          'Namespace': 'AWS/Lambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaTimeouts766EF377': dict({
        'Properties': dict({
          'ComparisonOperator': 'GreaterThanThreshold',
          'EvaluationPeriods': 1,
          'MetricName': 'Timeouts',
          'Namespace': 'MonitoredLambda',
          'Period': 300,
          'Statistic': 'Sum',
          'Threshold': 0,
          'TreatMissingData': 'ignore',
        }),
        'Type': 'AWS::CloudWatch::Alarm',
      }),
      'MonitoredLambdaTimeoutsMetricFilter5CC7530E': dict({
        'Properties': dict({
          'FilterPattern': '"Task timed out"',
          'LogGroupName': dict({
            'Ref': 'MonitoredLambdaLogGroup85A38BE4',
          }),
          'MetricTransformations': list([
            dict({
              'DefaultValue': 0,
              'MetricName': 'Timeouts',
              'MetricNamespace': 'MonitoredLambda',
              'MetricValue': '1',
              'Unit': 'Count',
            }),
          ]),
        }),
        'Type': 'AWS::Logs::MetricFilter',
      }),
    }),
    'Rules': dict({
      'CheckBootstrapVersion': dict({
        'Assertions': list([
          dict({
            'Assert': dict({
              'Fn::Not': list([
                dict({
                  'Fn::Contains': list([
                    list([
                      '1',
                      '2',
                      '3',
                      '4',
                      '5',
                    ]),
                    dict({
                      'Ref': 'BootstrapVersion',
                    }),
                  ]),
                }),
              ]),
            }),
            'AssertDescription': "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
          }),
        ]),
      }),
    }),
  })
# ---
